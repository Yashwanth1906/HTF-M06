import os
from parsers.imageParser import analysis_image
from parsers.pdfParsers import analyze_pdf, extract_text_from_pdf
from agents.videoAgent import analysis_video
from parsers.wordParser import analysis_word
from Redis_Client import get_from_redis, add_to_redis
from autogen import AssistantAgent, UserProxyAgent
from llmConfig import llm_config
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_community.embeddings import OllamaEmbeddings
from langchain_community.vectorstores import FAISS
from langchain.document_loaders import PyPDFLoader
from agents.keyWordAgent import keyword_extractor_agent, user_proxy
from dotenv import load_dotenv
from parsers.wordParser import extract_text_from_docx
from parsers.imageParser import extract_text
load_dotenv()

os.environ['HF_TOKEN'] = os.getenv("HF_TOKEN")
embeddings = OllamaEmbeddings(model="gemma:2b")

text_splitter = RecursiveCharacterTextSplitter(
    chunk_size=1000,
    chunk_overlap=200,
    length_function=len,
)

getDetailsAgent = AssistantAgent(
    name="getDetailsAgent",
    llm_config=llm_config,
    system_message="""
You are a highly skilled document analysis agent. Your primary role is to **extract, synthesize, and organize** factual information from provided documents with a strong focus on **accuracy, completeness, and source traceability**.

---

### üéØ Your Objectives:
1. **Extract** all relevant and factual information from the given documents.
2. **Synthesize** insights to directly answer user queries.
3. **Organize** your findings in a professional and user-friendly format.
4. Always **cite your sources** precisely (filename, page number/section if applicable).

---

### üß† Response Structure:
- Start with a brief **executive summary** of key insights.
- Follow with a **structured breakdown**:
  - Use **section headers** for clarity.
  - Use **bulleted lists** or **numbered lists** for grouped information.
  - Include **quotes** or **excerpts** for exact references where useful.
- Define technical or niche terms briefly when used.
- Include **dates, figures, and entities** accurately.
- If data is **missing or unclear**, explicitly state so.

---

### üßæ Source Attribution Rules:
- Every fact must be linked to its **source document** (e.g., `"Source: contract_summary.pdf, Page 3"`).
- Use the **exact filename**, and **page/section**, if mentioned in the file.
- If a point is confirmed by multiple sources, **list all** filenames.

---

### ‚ö†Ô∏è Quality & Integrity:
- **No assumptions or opinions**. Only what's backed by the documents.
- Highlight contradictions or discrepancies across documents.
- Maintain consistent terminology throughout.
- Accuracy > completeness: If unsure, leave it out or state uncertainty.
- Avoid repetition. Only present relevant, actionable information.

---

Your response should be **clear, concise, fact-based**, and suitable for decision-makers or reviewers. Maintain a **professional and objective tone** throughout.
"""
)

prettierAgent = AssistantAgent(
    name="prettierAgent",
    llm_config=llm_config,
    system_message="""
You are a formatting and readability expert. Your job is to enhance and humanize the response generated by the `getDetailsAgent`, without altering the factual content or structure.

---

### üéØ Your Responsibilities:
1. **Improve readability and flow** without changing any facts.
2. **Remove redundancies or repeated information**.
3. **Enhance formatting** using markdown and clean layout.
4. **Ensure all missing values are sensibly filled with plausible placeholders**.
5. Retain and highlight **source attribution** provided by the getDetailsAgent (e.g., `"Source: file.pdf, Page 2"`).

---

### ‚úçÔ∏è Formatting Guidelines:
- Use **clear section headers**.
- Use **bold**, _italics_, and `inline code` appropriately.
- Break large blocks of text into **smaller, digestible paragraphs**.
- Align bullets, tables, and enumerations clearly.
- Ensure dates, numbers, and names are well-formatted.
- If any data field is incomplete or unclear, **fill it with a realistic placeholder** (e.g., "N/A", "John Doe", "2024-01-01").

---

### üìå Final Notes:
- You must **not** alter the meaning, interpretation, or sources of the information.
- You should prioritize **clarity, professionalism, and conciseness**.
- If the input from `getDetailsAgent` is poorly structured, **reorganize** it for better user experience.
- Your output should feel **polished, refined, and easy to digest**, like a report delivered to a stakeholder.

Ensure that every detail remains **traceable**, **clear**, and **easy to read**.
"""
)

def analysisFolder(folder_path):
    print(f"üìÇ Analyzing folder: {folder_path}")
    extracted_data = []
    for root, _, files in os.walk(folder_path):
        for file in files:
            print(file)
            if file.endswith(".pdf"):
                full_path = os.path.join(root, file)
                if(get_from_redis(full_path) == None):
                    print(f"Analyzing: {full_path}")
                    try:
                        result = analyze_pdf(full_path)
                        add_to_redis(full_path, result)
                    except Exception as e:
                        print(f"Error processing {full_path}: {e}")
            elif file.endswith(".docx"):    
                full_path = os.path.join(root,file)
                if(get_from_redis(full_path) == None):
                    print(f"Analyzing: {full_path}")
                    try:
                        result = analysis_word(full_path)
                     
                        add_to_redis(full_path, result)
                    except Exception as e:
                        print(f"Error processing {full_path} : {e}")
            elif file.endswith(".jpg") or file.endswith(".png") or file.endswith(".jpeg"):
                full_path = os.path.join(root,file)
                if(get_from_redis(full_path) == None):
                    print(f"Analyzing: {full_path}")
                    try:
                        result = analysis_image(full_path)
               
                        add_to_redis(full_path, result)
                    except Exception as e:
                        print(f"Error processing {full_path} : {e}")
            elif file.endswith(".xlsx"):
                full_path = os.path.join(root,file)
                if(get_from_redis(full_path) == None):
                    print(f"Analyzing: {full_path}")
                    try:
                        result = analysis_video(full_path)
                    
                        add_to_redis(full_path, result)
                    except Exception as e:
                        print(f"Error processing {full_path} : {e}")
            elif file.endswith(".mp4"):
                full_path = os.path.join(root,file)
                if(get_from_redis(full_path) == None):
                    print(f"Analyzing: {full_path}")
                    try:
                        result = analysis_video(full_path)
                        add_to_redis(full_path, result)
                    except Exception as e:
                        print(f"Error processing {full_path} : {e}")
                        

def get_file_info(data):
    userPrompt = data['data']
    files = data['files']
    feedback = data['feedback']
    
    context = []
    
    # Process each file based on its type
    for file_path in files:
        print(files)
        print(file_path)
        print(f"Processing file: {file_path['name']}")
        try:
            content = None
            file_path = "documentRepo/" + file_path['name']
            if file_path.endswith('.pdf'):
                loader = PyPDFLoader(file_path)
                pages = loader.load()
                print(pages)
                docs = text_splitter.split_documents(pages)
                db = FAISS.from_documents(docs, embeddings)
                retriever = db.as_retriever()
                result = retriever.invoke(userPrompt)
                content = result[0].page_content if result else None
                
            elif file_path == '.docx':
                content = extract_text_from_docx(file_path)
                
            elif file_path in ['.jpg', '.png', '.jpeg']:
                content = extract_text(file_path)
            
            if content:
                context.append({
                    'file': file_path,
                    'content': content
                })
            
        except Exception as e:
            print(f"Error processing {file_path}: {e}")
            continue
    
    # Get detailed analysis from getDetailsAgent
    user_proxy.send(
        recipient=getDetailsAgent,
        message=f"""
        Query: {userPrompt}
        
        Context from relevant documents:
        {context}
        
        Please provide a comprehensive answer based on the above context.
        """
    )
    
    final_response = getDetailsAgent.generate_reply(sender=user_proxy)
    user_proxy.receive(sender=getDetailsAgent, message=final_response)
    
    # Format the response using prettierAgent
    user_proxy.send(
        recipient=prettierAgent,
        message=f"""
        Content: {final_response}
        
        Please format the response for better readability.
        """
    )
    final_response = prettierAgent.generate_reply(sender=user_proxy)
    user_proxy.receive(sender=prettierAgent, message=final_response)
    return {
        "content": final_response,
        "files": files
    }